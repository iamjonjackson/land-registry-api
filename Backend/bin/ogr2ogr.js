const { readdir, readFileSync, statSync } = require('fs')
const { emptyDirSync } = require('fs-extra')
const { join, basename, extname } = require('path')
const execa = require('execa')
const { cli } = require('cli-ux')

const action = cli.action
const landRegistry = join(__dirname, '../land-registry')
const geoJSON = join(__dirname, '../geoJSON')
const EXTENSION = '.gml'

const round = input => Math.round(input * 100 + Number.EPSILON) / 100

const statToMegaByte = stats => round(stats['size'] / 1e6)

// Clear directory of existing GeoJSON data
emptyDirSync(geoJSON)

readdir(landRegistry, async (err, files) => {
    if (err) return console.error('Unable to scan directory:', err)

    // Filter returned files to only get GML files (ignoring the GFS files generated by ogr2ogr's conversion)
    const filteredFiles = files.filter(file => extname(file).toLowerCase() === EXTENSION)

    const fileCount = filteredFiles.length
    action.start(`0/${fileCount} Converting GML to GeoJSON`)
    
    for (const [i, file] of filteredFiles.entries()) {
        action.start(`${i + 1}/${fileCount} Converting ${file}`)

        // Append file size to log status of current process to get a rough idea of how long it will take
        const fileSize = statToMegaByte(statSync(`${landRegistry}/${file}`))
        action.start(`${i + 1}/${fileCount} Converting ${file} (${fileSize} MiB)`)
        
        // Strip extension from filename
        const name = basename(file, extname(file))
        const filePath = `${geoJSON}/${name}.geojson`

        try {
            await execa('ogr2ogr', ['-f', 'GeoJSON', filePath, `${landRegistry}/${file}`])
        } catch (error) {
            console.error(error)
        }

        console.log('hello')

        readFileSync(filePath, (error, data) => {
            if (error) console.error(error)
            const json = JSON.parse(data)
            console.log(json)
            throw 'done'
        })

        const fileSizeGeo = statToMegaByte(statSync(filePath))
        console.log(`âœ“ ${file} (${fileSize} MiB to ${fileSizeGeo} MiB)`)
    }
})